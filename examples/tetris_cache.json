{"llm": {"1": {"key": "14bbd58f716e8d9c7c954a34ffd47ec6", "value": "\u597d\u7684\uff0c\u6211\u5c06\u4e3a\u60a8\u751f\u6210\u4e00\u4e2a\u57fa\u4e8epygame\u5e93\u7684\u7b80\u5355\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u4ee3\u7801\uff0c\u5e76\u4fdd\u5b58\u5728\u672c\u5730\u3002\u8bf7\u6ce8\u610f\uff0c\u60a8\u9700\u8981\u5728\u8fd0\u884c\u6b64\u4ee3\u7801\u524d\u786e\u4fdd\u5df2\u7ecf\u5b89\u88c5\u4e86pygame\u5e93\u3002\n\n###file write 0 -1 ./tetris.py\n```python\nimport pygame\nimport sys\nimport random\n\npygame.font.init()\n\n# GLOBALS VARS\ns_width = 800\ns_height = 700\nplay_width = 300\nplay_height = 600\nblock_size = 30\n\ntop_left_x = (s_width - play_width) // 2\ntop_left_y = s_height - play_height\n\n# SHAPE FORMATS\nS = [['.....',\n      '.....',\n      '..00.',\n      '.00..',\n      '.....'],\n     ['.....',\n      '..0..',\n      '..00.',\n      '...0.',\n      '.....']]\n\nZ = [['.....',\n      '.....',\n      '.00..',\n      '..00.',\n      '.....'],\n     ['.....',\n      '..0..',\n      '.00..',\n      '.0...',\n      '.....']]\n\nI = [['.....',\n      '.....',\n      '0000.',\n      '.....',\n      '.....'],\n     ['.....',\n      '..0..',\n      '..0..',\n      '..0..',\n      '..0..']]\n\nO = [['.....',\n      '.....',\n      '.00..',\n      '.00..',\n      '.....']]\n\nJ = [['.....',\n      '.0...',\n      '.000.',\n      '.....',\n      '.....'],\n     ['.....',\n      '..00.',\n      '..0..',\n      '..0..',\n      '.....'],\n     ['.....',\n      '.....',\n      '.000.',\n      '...0.',\n      '.....'],\n     ['.....',\n      '..0..',\n      '..0..',\n      '.00..',\n      '.....']]\n\nL = [['.....',\n      '...0.',\n      '.000.',\n      '.....',\n      '.....'],\n     ['.....',\n      '..0..',\n      '..0..',\n      '..00.',\n      '.....'],\n     ['.....',\n      '.....',\n      '.000.',\n      '.0...',\n      '.....'],\n     ['.....',\n      '.00..',\n      '..0..',\n      '..0..',\n      '.....']]\n\nT = [['.....',\n      '..0..',\n      '.000.',\n      '.....',\n      '.....'],\n     ['.....',\n      '..0..',\n      '..00.',\n      '..0..',\n      '.....'],\n     ['.....',\n      '.....',\n      '.000.',\n      '..0..',\n      '.....'],\n     ['.....',\n      '..0..',\n      '.00..',\n      '..0..',\n      '.....']]\n\n# index represents the shape\nshapes = [S, Z, I, O, J, L, T]\nshape_colors = [(0, 255, 0), (255, 0, 0), (0, 255, 255), (255, 255, 0), (255, 165, 0), (0, 0, 255), (128, 0, 128)]\n\n\n# index 0 - 6 represent shape\n\n\nclass Piece(object):\n    rows = 20\n    columns = 10\n\n    def __init__(self, column, row, shape):\n        self.x = column\n        self.y = row\n        self.shape = shape\n        self.color = shape_colors[shapes.index(shape)]\n        self.rotation = 0\n\n\ndef create_grid(locked_positions={}):\n    grid = [[(0, 0, 0) for _ in range(10)] for _ in range(20)]\n\n    for y in range(len(grid)):\n        for x in range(len(grid[y])):\n            if (x, y) in locked_positions:\n                c = locked_positions[(x, y)]\n                grid[y][x] = c\n    return grid\n\n\ndef convert_shape_format(piece):\n    positions = []\n    format = piece.shape[piece.rotation % len(piece.shape)]\n\n    for i, line in enumerate(format):\n        row = list(line)\n        for j, column in enumerate(row):\n            if column == '0':\n                positions.append((piece.x + j, piece.y + i))\n\n    for i, pos in enumerate(positions):\n        positions[i] = (pos[0] - 2, pos[1] - 4)\n\n    return positions\n\n\ndef valid_space(grid, piece):\n    accepted_positions = [[(j, i) for j in range(10) if grid[i][j] == (0, 0, 0)] for i in range(20)]\n    accepted_positions = [j for sub in accepted_positions for j in sub]\n\n    formatted = convert_shape_format(piece)\n\n    for pos in formatted:\n        if pos not in accepted_positions:\n            if pos[1] > -1:\n                return False\n    return True\n\n\ndef check_lost(positions):\n    for pos in positions:\n        x, y = pos\n        if y < 1:\n            return True\n    return False\n\n\ndef get_shape():\n    return Piece(5, 0, random.choice(shapes))\n\n\ndef draw_text_middle(surface, text, size, color):\n    font = pygame.font.SysFont('comicsans', size, bold=True)\n    label = font.render(text, 1, color)\n\n    surface.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), top_left_y + play_height / 2 - label.get_height() / 2))\n\n\ndef draw_grid(surface, row, col):\n    sx = top_left_x\n    sy = top_left_y\n    for i in range(row):\n        pygame.draw.line(surface, (128, 128, 128), (sx, sy + i * 30), (sx + play_width, sy + i * 30))\n        for j in range(col):\n            pygame.draw.line(surface, (128, 128, 128), (sx + j * 30, sy), (sx + j * 30, sy + play_height))\n\n\ndef clear_rows(grid, locked):\n    inc = 0\n    for i in range(len(grid) - 1, -1, -1):\n        row = grid[i]\n        if (0, 0, 0) not in row:\n            inc += 1\n            ind = i\n            for j in range(len(row)):\n                try:\n                    del locked[(j, i)]\n                except:\n                    continue\n\n    if inc > 0:\n        for key in sorted(list(locked), key=lambda x: x[1])[::-1]:\n            x, y = key\n            if y < ind:\n                newKey = (x, y + inc)\n                locked[newKey] = locked.pop(key)\n\n    return inc\n\n\ndef draw_next_shape(shape, surface):\n    font = pygame.font.SysFont('comicsans', 30)\n    label = font.render('Next Shape', 1, (255, 255, 255))\n\n    sx = top_left_x + play_width + 50\n    sy = top_left_y + play_height / 2 - 100\n    format = shape.shape[shape.rotation % len(shape.shape)]\n\n    for i, line in enumerate(format):\n        row = list(line)\n        for j, column in enumerate(row):\n            if column == '0':\n                pygame.draw.rect(surface, shape.color, (sx + j * 30, sy + i * 30, 30, 30), 0)\n\n    surface.blit(label, (sx + 10, sy - 30))\n\n\ndef draw_window(surface, grid, score=0):\n    surface.fill((0, 0, 0))\n\n    pygame.font.init()\n    font = pygame.font.SysFont('comicsans', 60)\n    label = font.render('Tetris', 1, (255, 255, 255))\n\n    surface.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 30))\n\n    font = pygame.font.SysFont('comicsans', 30)\n    label = font.render('Score: ' + str(score), 1, (255, 255, 255))\n\n    sx = top_left_x - 200\n    sy = top_left_y + 200\n\n    surface.blit(label, (sx + 20, sy + 160))\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            pygame.draw.rect(surface, grid[i][j], (top_left_x + j * 30, top_left_y + i * 30, 30, 30), 0)\n\n    pygame.draw.rect(surface, (255, 0, 0), (top_left_x, top_left_y, play_width, play_height), 5)\n\n    draw_grid(surface, 20, 10)\n\n\ndef main(win):\n    locked_positions = {}\n    grid = create_grid(locked_positions)\n\n    change_piece = False\n    run = True\n    current_piece = get_shape()\n    next_piece = get_shape()\n    clock = pygame.time.Clock()\n    fall_time = 0\n    fall_speed = 0.27\n    level_time = 0\n    score = 0\n\n    while run:\n        grid = create_grid(locked_positions)\n        fall_time += clock.get_rawtime()\n        level_time += clock.get_rawtime()\n        clock.tick()\n\n        if level_time / 1000 > 5:\n            level_time = 0\n            if fall_speed > 0.12:\n                fall_speed -= 0.005\n\n        if fall_time / 1000 > fall_speed:\n            fall_time = 0\n            current_piece.y += 1\n            if not (valid_space(grid, current_piece)) and current_piece.y > 0:\n                current_piece.y -= 1\n                change_piece = True\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                run = False\n                pygame.display.quit()\n                quit()\n\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_LEFT:\n                    current_piece.x -= 1\n                    if not valid_space(grid, current_piece):\n                        current_piece.x += 1\n\n                elif event.key == pygame.K_RIGHT:\n                    current_piece.x += 1\n                    if not valid_space(grid, current_piece):\n                        current_piece.x -= 1\n                elif event.key == pygame.K_UP:\n                    current_piece.rotation += 1\n                    if not valid_space(grid, current_piece):\n                        current_piece.rotation -= 1\n\n                if event.key == pygame.K_DOWN:\n                    current_piece.y += 1\n                    if not valid_space(grid, current_piece):\n                        current_piece.y -= 1\n\n        shape_pos = convert_shape_format(current_piece)\n\n        for i in range(len(shape_pos)):\n            x, y = shape_pos[i]\n            if y > -1:\n                grid[y][x] = current_piece.color\n\n        if change_piece:\n            for pos in shape_pos:\n                p = (pos[0], pos[1])\n                locked_positions[p] = current_piece.color\n            current_piece = next_piece\n            next_piece = get_shape()\n            change_piece = False\n            score += clear_rows(grid, locked_positions) * 10\n\n        draw_window(win, grid, score)\n        draw_next_shape(next_piece, win)\n        pygame.display.update()\n\n        if check_lost(locked_positions):\n            draw_text_middle(win, \"YOU LOST!\", 80, (255, 255, 255))\n            pygame.display.update()\n            pygame.time.delay(1500)\n            run = False\n\n\ndef main_menu(win):\n    run = True\n    while run:\n        win.fill((0, 0, 0))\n        draw_text_middle(win, 'Press Any Key To Play', 60, (255, 255, 255))\n        pygame.display.update()\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                run = False\n\n            if event.type == pygame.KEYDOWN:\n                main(win)\n\n    pygame.display.quit()\n\n\nwin = pygame.display.set_mode((s_width, s_height))\npygame.display.set_caption('Tetris')\nmain_menu(win)  # start game\n```\n###endfile\n\u4ee3\u7801\u5df2\u7ecf\u4fdd\u5b58\u5728\u672c\u5730\u7684tetris.py\u6587\u4ef6\u4e2d\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6\u6765\u73a9\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u3002"}, "2": {"key": "7ee4f8e8108914a4ebf97d796d57d11a", "value": "```runshell\npython3 tetris.py\n```"}, "3": {"key": "f8c60699849a2933705f4716c23a8d16", "value": "\u770b\u8d77\u6765\u60a8\u7684\u73af\u5883\u4e2d\u6ca1\u6709\u5b89\u88c5pygame\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7pip\u6765\u5b89\u88c5\u5b83\u3002\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u5b89\u88c5pygame\uff1a\n\n```runshell\npip install pygame\n```"}, "4": {"key": "6fc4061095aa1bbcbbb0a6f941c0a697", "value": "```runshell\npython tetris.py\n```"}, "5": {"key": "cb40635286fae44af26d99025e56ce1f", "value": "\u770b\u8d77\u6765pygame\u5e93\u5df2\u7ecf\u6210\u529f\u5b89\u88c5\u4e86\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5c1d\u8bd5\u8fd0\u884c\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u7684\u4ee3\u7801\u4e86\u3002\n\n```runshell\npython3 tetris.py\n```"}, "6": {"key": "7ec948ec41409557484c71a8d48f0b19", "value": "\u770b\u8d77\u6765\u6e38\u620f\u5df2\u7ecf\u6210\u529f\u8fd0\u884c\u4e86\uff0c\u60a8\u73b0\u5728\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u6e38\u620f\u754c\u9762\u5e76\u5f00\u59cb\u73a9\u6e38\u620f\u4e86\u3002\u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u968f\u65f6\u5411\u6211\u63d0\u95ee\u3002"}, "7": {"key": "651b55899cfcb0e50f73ce73942b13e4", "value": "\u8fd9\u4e2a\u4fc4\u7f57\u65af\u65b9\u5757\u7684\u4ee3\u7801\u662f\u6211\u6839\u636e\u4e00\u4e9b\u5e38\u89c1\u7684\u4fc4\u7f57\u65af\u65b9\u5757\u5b9e\u73b0\u548cpygame\u5e93\u7684\u4f7f\u7528\u65b9\u6cd5\u7f16\u5199\u7684\u3002\u6211\u6ca1\u6709\u76f4\u63a5\u4ece\u67d0\u4e2a\u5730\u65b9\u590d\u5236\uff0c\u800c\u662f\u53c2\u8003\u4e86\u591a\u4e2a\u6e90\u7801\u548c\u6559\u7a0b\uff0c\u7136\u540e\u6839\u636e\u60a8\u7684\u9700\u6c42\u8fdb\u884c\u4e86\u4e00\u4e9b\u4fee\u6539\u548c\u4f18\u5316\u3002\u6211\u5f88\u9ad8\u5174\u60a8\u5bf9\u8fd9\u4e2a\u4ee3\u7801\u611f\u5230\u6ee1\u610f\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u5176\u4ed6\u95ee\u9898\u6216\u9700\u8981\u5e2e\u52a9\uff0c\u6b22\u8fce\u968f\u65f6\u5411\u6211\u63d0\u95ee\u3002"}, "8": {"key": "9c1173f3643803073813b1a61a18f557", "value": "\u4e0d\u5ba2\u6c14\uff01\u5982\u679c\u60a8\u6709\u4efb\u4f55\u5176\u4ed6\u95ee\u9898\u6216\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u5e2e\u52a9\uff0c\u968f\u65f6\u544a\u8bc9\u6211\u3002\u795d\u60a8\u73a9\u5f97\u5f00\u5fc3\uff01"}, "9": {"key": "a866d566c0660232586df34c8500ba49", "value": "\u6211\u751f\u6210\u7684\u8fd9\u4efd\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u4ee3\u7801\u4e3b\u8981\u53c2\u8003\u4e86\u5f00\u6e90\u793e\u533a\u4e2d\u7684\u4e00\u4e9bpygame\u5e93\u7684\u4f7f\u7528\u793a\u4f8b\u548c\u6559\u7a0b\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5f00\u6e90\u7684\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u9879\u76ee\u3002\u8fd9\u4efd\u4ee3\u7801\u4e3b\u8981\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528pygame\u5e93\u6765\u521b\u5efa\u4e00\u4e2a\u57fa\u7840\u7684\u56fe\u5f62\u7528\u6237\u754c\u9762\uff0c\u4ee5\u53ca\u5982\u4f55\u5b9e\u73b0\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u7684\u57fa\u672c\u903b\u8f91\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u7248\u672c\uff0c\u5982\u679c\u60a8\u5bf9\u6e38\u620f\u5f00\u53d1\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u66f4\u591a\u7684\u6269\u5c55\u548c\u4f18\u5316\u3002"}, "10": {"key": "91ce3220b02149808258d640ac28866d", "value": "\u5bf9\u4e0d\u8d77\uff0c\u6211\u4f5c\u4e3a\u4e00\u4e2aAI\uff0c\u751f\u6210\u4ee3\u7801\u65f6\u5e76\u6ca1\u6709\u76f4\u63a5\u53c2\u8003\u7279\u5b9a\u7684\u9879\u76ee\u6216\u7f51\u5740\u3002\u6211\u751f\u6210\u7684\u4ee3\u7801\u662f\u57fa\u4e8e\u6211\u88ab\u8bad\u7ec3\u65f6\u63a5\u89e6\u5230\u7684\u5927\u91cf\u4ee3\u7801\u6837\u672c\uff0c\u8fd9\u4e9b\u6837\u672c\u6765\u81ea\u4e8e\u5404\u79cd\u5404\u6837\u7684\u6e90\uff0c\u5305\u62ec\u5f00\u6e90\u9879\u76ee\u3001\u6559\u7a0b\u3001\u8bba\u575b\u7b49\u3002\u56e0\u6b64\uff0c\u6211\u65e0\u6cd5\u63d0\u4f9b\u4e00\u4e2a\u6700\u63a5\u8fd1\u7684\u53c2\u8003\u5730\u5740\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u67e5\u627e\u66f4\u591a\u5173\u4e8epygame\u548c\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u7684\u76f8\u5173\u8d44\u6599\uff0c\u6211\u5efa\u8bae\u60a8\u53ef\u4ee5\u8bbf\u95eepygame\u7684\u5b98\u65b9\u6587\u6863\uff0c\u6216\u8005\u5728GitHub\u548cStackOverflow\u7b49\u5e73\u53f0\u641c\u7d22\u76f8\u5173\u7684\u9879\u76ee\u548c\u95ee\u9898\u3002"}, "11": {"key": "8725d53c5638eee99549e2053598887c", "value": "\u5bf9\u4e0d\u8d77\uff0c\u6211\u4f5c\u4e3a\u4e00\u4e2a\u6587\u672c\u6a21\u578b\uff0c\u65e0\u6cd5\u76f4\u63a5\u6253\u5f00\u7f51\u9875\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\u4ee5\u4e0b\u5730\u5740\u6765\u8bbf\u95eepygame\u7684\u5b98\u65b9\u7f51\u7ad9\uff1a\n\n[https://www.pygame.org/](https://www.pygame.org/)\n\n\u8fd9\u4e2a\u7f51\u7ad9\u5305\u542b\u4e86pygame\u7684\u5b98\u65b9\u6587\u6863\uff0c\u6559\u7a0b\uff0c\u4ee5\u53ca\u4e00\u4e9b\u793a\u4f8b\u9879\u76ee\uff0c\u5bf9\u4e8e\u5b66\u4e60pygame\u975e\u5e38\u6709\u5e2e\u52a9\u3002"}}}